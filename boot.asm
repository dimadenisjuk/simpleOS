 org 7C00h            ;адреса нашей программы расчитываются с учетом данной директивы
use16                    ;генерируется шестнадцатиричный код

cli                         ;запрещаем  прерывания для смены адресов в сегментных регистрах
mov ax, 0              
mov es, ax
mov ds, ax
mov ss, ax
mov sp, 7C00h
sti                         ;разрешаем прерывания (после изменения адресов)

;mov ax, 0012h     ;установка видео режима для вывода строки на экран
mov ax, 0003h
int 10h

mov ax, 1301h     ;собственно вывод строки  функция 13h int 10h 
mov bp, stroka     ;адрес выводимой строки
mov dx, 0000h     ;строка и колонка в которой  выводится текст
mov cx, 21           ;количество символов выводимой строки
mov bx, 000eh     ;00-номер видео страницы (лучше не трогать) 0eh-атрибуты cимвола(цвет,фон)
int 10h

;------------наша супер функция ah 42h int 13h-----------

  mov ah, 42h     ;функция копирования - главное действующее лицо этого урока
  mov si, lba       ;смещение структуры LBA
  mov dl, 80h      ;для флешки это значение должно быть 80h, впрочем, как и для жесткого диска
  int 13h
  jc error              ;если ошибка чтения сектора, то выдаем соответствующее сообщение 

 jmp 0000:7E00h    ;т. к. ядро мы грузили по адресу 0000:7E00h, то и управление ядру мы 
                                ;передаем прыгая на этот адрес

error:
        mov ax, 1301h     ;уже знакомая нам функция вывода строки
        mov bp, err0        ;
        mov dx, 0100h     ;
        mov cx, 6             ;
        mov bx, 000eh     ;
        int 10h                 ;
        jmp $                   ;топтаться на месте

err0   db 'Error!'
stroka db 'Ok, MBR loaded again!'

lba:
; +----------------------------------------------------------------------------------
; | Смещение   Тип                         Назначение                              
; |                                                                                 
; |   00h     byte                      размер структуры                            
; |   01h     byte                       зарезервировано                           
; |   02h     word                   сколько секторов читать                        
; |   04h     dword        адрес буфера в формате сегмент(word):смещение(word)      
; |   08h     qword             стартовый номер сектора для чтения                  
; |   10h     qword  хвост 64 битного адреса (используется при 32х битном FFFF:FFFF)
; +----------------------------------------------------------------------------------
db 10h
db 00h
dw 0001h                               ;копируем 1 сектор - больше нам пока не надо
dd 00007e00h                        ;куда грузим первый сектор грузим как у нас на рисунках сразу                                                      ;после нулевого если  7С00h + 200h(512 байт) = 7E00h
dq 0000000000000001h        ;начинаем копировать с первого сектора у нас там ядро
dq 0000000000000000h

times 510 - ($ - $$) db 0       ;заполнение нулями промежутка между предыдущим байтом и пос-
db 0x55,0xAA                      ;ледними двумя байтами
